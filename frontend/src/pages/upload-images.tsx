import { NextPage } from "next";

import { FileWithPath, useDropzone } from "react-dropzone";
import { use, useCallback, useState } from "react";
import Head from "next/head";
import { api } from "~/utils/api";

import { FileUploadedItem } from "~/models/file-uploaded-item.model";
import { useRouter } from "next/router";
import { AlertTriangle, Check, CheckCircle, RotateCw } from "lucide-react";

enum FileStatus {
  Uploading,
  Uploaded,
  Error,
}

type ImageFileUpload = {
  file: FileWithPath;
  status: FileStatus;
};

interface UploadImagesProps {}

const MAX_FILE_SIZE = 6 * 1024 * 1024; // 3MB
const ACCEPTED_FILE_TYPES = [
  "image/tiff",
  "image/jpeg",
  "image/x-portable-bitmap",
  "image/bmp",
  "image/x-tga",
  "image/gif",
  "image/webp",
  "image/png",
];

const UploadImages: NextPage<UploadImagesProps> = () => {
  const [files, setFiles] = useState<ImageFileUpload[]>([]);
  const router = useRouter();
  const getPresignedUploadURLs =
    api.images.getPresignedUploadURLs.useMutation();
  const postUploadComplete = api.images.postUploadComplete.useMutation();

  const uploadFileToS3 = async (signedUrl: string, file: FileWithPath) => {
    const response = await fetch(signedUrl, {
      method: "PUT",
      body: file,
      headers: {
        "Content-Type": file.type,
      },
    });

    if (!response.ok) {
      throw new Error(
        `Failed to upload ${file.name}. Status: ${response.status}`
      );
    }

    // Extract relevant headers or other information from the response
    const eTag = response.headers.get("ETag");

    // Extract the S3 file location from the pre-signed URL by removing the signed parameters
    const s3Location = signedUrl.split("?")[0];

    // Return an object with the details
    return {
      fileName: file.name,
      status: response.status,
      statusText: response.statusText,
      eTag: eTag,
      s3Location: s3Location,
      url: signedUrl,
    };
  };

  const onDrop = useCallback(async (acceptedFiles: FileWithPath[]) => {
    // Append the new files to state with 'uploading' status
    setFiles((prev) => [
      ...prev,
      ...acceptedFiles.map((file) => ({
        file,
        status: FileStatus.Uploading,
      })),
    ]);

    try {
      const signedUrls = await getPresignedUploadURLs.mutateAsync({
        fileNames: acceptedFiles.map((file) => file.name),
      });

      // Upload each file to S3
      const uploadedFilesPromises = signedUrls.map(async (file) => {
        const fileToUpload = acceptedFiles.find(
          (f) => f.name === file.fileName
        );
        if (!fileToUpload) return null;

        try {
          const uploadedFile = await uploadFileToS3(file.url, fileToUpload);
          return {
            FileName: uploadedFile.fileName,
            S3Location: uploadedFile.s3Location ?? uploadedFile.url,
          };
        } catch (e) {
          console.error(`Error uploading ${fileToUpload.name}:`, e);
          return null;
        }
      });

      const uploadedFiles = (await Promise.all(uploadedFilesPromises)).filter(
        Boolean
      ) as FileUploadedItem[];

      await postUploadComplete.mutateAsync({
        fileUploadedItems: uploadedFiles,
      });

      // Update the file statuses after all uploads
      setFiles((prev) =>
        prev.map((f) => ({
          ...f,
          status: uploadedFiles.some((uf) => uf.FileName === f.file.name)
            ? FileStatus.Uploaded
            :  FileStatus.Error,
        }))
      );
    } catch (e) {
      console.error("Error getting signed URLs:", e);
      setFiles((prev) =>
        prev.map((f) => ({
          ...f,
          status: FileStatus.Error,
        }))
      );
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: { ACCEPTED_FILE_TYPES },
    maxSize: MAX_FILE_SIZE,
  });
  const handleBackToGallery = useCallback(() => {
    router.push("/");
  }, []);

  return (
    <>
      <Head>
        <title>G-Lytho</title>
        <meta name="description" content="Generated by Greg Uretzky" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-gray-200  tracking-tight">
        <div className="container">
          <div className="mx-2 flex flex-col gap-12  sm:mx-0">
            <div className="flex items-center justify-center text-white ">
              <h2 className="text-5xl font-extrabold  text-black sm:text-[5rem]">
                Upload <span className="text-fuchsia-700">&</span> Zoom
              </h2>
            </div>

            <div>
              <button
                className="rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700"
                onClick={() => {
                  handleBackToGallery();
                }}
              >
                Back to Gallery
              </button>
            </div>
            <div>
              <div className="flex flex-col items-center justify-center gap-12 overflow-y-auto ">
                <div
                  {...getRootProps()}
                  className="rounded-md border-4 border-dashed border-gray-300 p-10"
                >
                  <input {...getInputProps()} />
                  {isDragActive ? (
                    <p>Drop the files here ...</p>
                  ) : (
                    <p>Drag & drop some files here, or click to select files</p>
                  )}
                </div>
                <ul role="list" className="divide: divide-y">
                  {files.map((file) => (
                    <li key={file.file.name} className="flex py-2">
                      <div className="flex min-w-0 items-center justify-between gap-x-4">
                        <span className="text-sm font-semibold leading-6 text-gray-900">
                          {file.file.name}
                        </span>
                        <span className="text-sm font-semibold leading-6 text-gray-900">
                          {file.status === FileStatus.Uploading ? (
                            <>
                              <RotateCw className="h-6 w-6 animate-spin text-gray-400" />
                            </>
                          ) : (
                            <>
                              {file.status === FileStatus.Uploaded ? (
                                <CheckCircle className="h-6 w-6 text-green-600" />
                              ) : (
                                <AlertTriangle className="h-6 w-6 text-red-600" />
                              )}
                            </>
                          )}
                        </span>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default UploadImages;
